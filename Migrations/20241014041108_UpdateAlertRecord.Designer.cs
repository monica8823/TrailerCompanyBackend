// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrailerCompanyBackend.Models;

#nullable disable

namespace TrailerCompanyBackend.Migrations
{
    [DbContext(typeof(TrailerCompanyDbContext))]
    [Migration("20241014041108_UpdateAlertRecord")]
    partial class UpdateAlertRecord
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("TrailerAccessorySizeAssociation", b =>
                {
                    b.Property<int>("TrailerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("trailer_id");

                    b.Property<int>("AccessorySizeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("accessory_size_id");

                    b.HasKey("TrailerId", "AccessorySizeId");

                    b.HasIndex("AccessorySizeId");

                    b.ToTable("trailer_accessory_size_association", (string)null);
                });

            modelBuilder.Entity("TrailerCompanyBackend.Models.Accessory", b =>
                {
                    b.Property<int>("AccessoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("accessory_id");

                    b.Property<string>("AccessoryType")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("accessory_type");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("description");

                    b.Property<int>("StoreId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("store_id");

                    b.HasKey("AccessoryId");

                    b.HasIndex("StoreId");

                    b.ToTable("accessories", (string)null);
                });

            modelBuilder.Entity("TrailerCompanyBackend.Models.AccessorySize", b =>
                {
                    b.Property<int>("SizeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("size_id");

                    b.Property<int>("AccessoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("accessory_id");

                    b.Property<string>("DetailedSpecification")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("detailed_specification");

                    b.Property<string>("SizeName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("size_name");

                    b.Property<int>("ThresholdQuantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("threshold_quantity");

                    b.HasKey("SizeId");

                    b.HasIndex("AccessoryId");

                    b.ToTable("accessory_sizes", (string)null);
                });

            modelBuilder.Entity("TrailerCompanyBackend.Models.AlertRecord", b =>
                {
                    b.Property<int>("AlertId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("alert_id");

                    b.Property<int?>("AccessorySizeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("accessory_size_id");

                    b.Property<DateTime>("AlertTime")
                        .HasColumnType("DATETIME")
                        .HasColumnName("alert_time");

                    b.Property<string>("AlertType")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("alert_type");

                    b.Property<int>("CurrentQuantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("current_quantity");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<int>("ThresholdQuantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("threshold_quantity");

                    b.Property<int?>("TrailerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("trailer_id");

                    b.HasKey("AlertId");

                    b.HasIndex("AccessorySizeId");

                    b.HasIndex("TrailerId");

                    b.ToTable("alert_records", (string)null);
                });

            modelBuilder.Entity("TrailerCompanyBackend.Models.AssemblyRecord", b =>
                {
                    b.Property<int>("AssemblyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("assembly_id");

                    b.Property<int?>("AccessorySizeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("accessory_size_id");

                    b.Property<DateTime>("AssemblyTime")
                        .HasColumnType("DATETIME")
                        .HasColumnName("assembly_time");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("operator");

                    b.Property<int>("TrailerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("trailer_id");

                    b.HasKey("AssemblyId");

                    b.HasIndex("AccessorySizeId");

                    b.HasIndex("TrailerId");

                    b.ToTable("assembly_records", (string)null);
                });

            modelBuilder.Entity("TrailerCompanyBackend.Models.DisposalRecord", b =>
                {
                    b.Property<int>("DisposalId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("disposal_id");

                    b.Property<int?>("AccessorySizeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("accessory_size_id");

                    b.Property<DateTime>("DisposalTime")
                        .HasColumnType("DATETIME")
                        .HasColumnName("disposal_time");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("operator");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("reason");

                    b.Property<int?>("TrailerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("trailer_id");

                    b.HasKey("DisposalId");

                    b.HasIndex("AccessorySizeId");

                    b.HasIndex("TrailerId");

                    b.ToTable("disposal_records", (string)null);
                });

            modelBuilder.Entity("TrailerCompanyBackend.Models.InventoryRecord", b =>
                {
                    b.Property<int>("RecordId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("record_id");

                    b.Property<int?>("AccessorySizeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("accessory_size_id");

                    b.Property<DateTime>("OperationTime")
                        .HasColumnType("DATETIME")
                        .HasColumnName("operation_time");

                    b.Property<string>("OperationType")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("operation_type");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("operator");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantity");

                    b.Property<int?>("TargetStoreId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("target_store_id");

                    b.Property<int?>("TrailerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("trailer_id");

                    b.HasKey("RecordId");

                    b.HasIndex("AccessorySizeId");

                    b.HasIndex("TargetStoreId");

                    b.HasIndex("TrailerId");

                    b.ToTable("inventory_records", (string)null);
                });

            modelBuilder.Entity("TrailerCompanyBackend.Models.RepairRecord", b =>
                {
                    b.Property<int>("RepairId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("repair_id");

                    b.Property<int?>("AccessorySizeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("accessory_size_id");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("operator");

                    b.Property<string>("RepairDetails")
                        .IsRequired()
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("repair_details");

                    b.Property<DateTime>("RepairTime")
                        .HasColumnType("DATETIME")
                        .HasColumnName("repair_time");

                    b.Property<int?>("TrailerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("trailer_id");

                    b.HasKey("RepairId");

                    b.HasIndex("AccessorySizeId");

                    b.HasIndex("TrailerId");

                    b.ToTable("repair_records", (string)null);
                });

            modelBuilder.Entity("TrailerCompanyBackend.Models.RestockRecord", b =>
                {
                    b.Property<int>("RestockId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("restock_id");

                    b.Property<int?>("AccessorySizeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("accessory_size_id");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("operator");

                    b.Property<int>("RestockQuantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("restock_quantity");

                    b.Property<DateTime>("RestockTime")
                        .HasColumnType("DATETIME")
                        .HasColumnName("restock_time");

                    b.Property<int?>("TrailerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("trailer_id");

                    b.HasKey("RestockId");

                    b.HasIndex("AccessorySizeId");

                    b.HasIndex("TrailerId");

                    b.ToTable("restock_records", (string)null);
                });

            modelBuilder.Entity("TrailerCompanyBackend.Models.SalesRecord", b =>
                {
                    b.Property<int>("SalesId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sales_id");

                    b.Property<int?>("AccessorySizeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("accessory_size_id");

                    b.Property<string>("InvNumber")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("inv_number");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("operator");

                    b.Property<double>("SalesPrice")
                        .HasColumnType("FLOAT")
                        .HasColumnName("sales_price");

                    b.Property<DateTime>("SalesTime")
                        .HasColumnType("DATETIME")
                        .HasColumnName("sales_time");

                    b.Property<int?>("TrailerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("trailer_id");

                    b.HasKey("SalesId");

                    b.HasIndex("AccessorySizeId");

                    b.HasIndex("TrailerId");

                    b.ToTable("sales_records", (string)null);
                });

            modelBuilder.Entity("TrailerCompanyBackend.Models.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("store_id");

                    b.Property<string>("StoreAddress")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("store_address");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("store_name");

                    b.HasKey("StoreId");

                    b.ToTable("stores", (string)null);
                });

            modelBuilder.Entity("TrailerCompanyBackend.Models.Trailer", b =>
                {
                    b.Property<int>("TrailerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("trailer_id");

                    b.Property<string>("CurrentStatus")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("current_status");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("model_name");

                    b.Property<double>("RatedCapacity")
                        .HasColumnType("FLOAT")
                        .HasColumnName("rated_capacity");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("size");

                    b.Property<int>("StoreId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("store_id");

                    b.Property<int>("ThresholdQuantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("threshold_quantity");

                    b.Property<string>("Vin")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("vin");

                    b.HasKey("TrailerId");

                    b.HasIndex("StoreId");

                    b.HasIndex(new[] { "Vin" }, "IX_trailers_vin")
                        .IsUnique();

                    b.ToTable("trailers", (string)null);
                });

            modelBuilder.Entity("TrailerCompanyBackend.Models.TransferRecord", b =>
                {
                    b.Property<int>("TransferId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("transfer_id");

                    b.Property<int?>("AccessorySizeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("accessory_size_id");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("operator");

                    b.Property<int>("SourceStoreId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("source_store_id");

                    b.Property<int>("TargetStoreId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("target_store_id");

                    b.Property<int?>("TrailerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("trailer_id");

                    b.Property<DateTime>("TransferTime")
                        .HasColumnType("DATETIME")
                        .HasColumnName("transfer_time");

                    b.HasKey("TransferId");

                    b.HasIndex("AccessorySizeId");

                    b.HasIndex("SourceStoreId");

                    b.HasIndex("TargetStoreId");

                    b.HasIndex("TrailerId");

                    b.ToTable("transfer_records", (string)null);
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(120)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("password");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("registration_date");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("role");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("status");

                    b.Property<int>("UserRoleEnum")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "Email" }, "IX_users_email")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("TrailerAccessorySizeAssociation", b =>
                {
                    b.HasOne("TrailerCompanyBackend.Models.AccessorySize", null)
                        .WithMany()
                        .HasForeignKey("AccessorySizeId")
                        .IsRequired();

                    b.HasOne("TrailerCompanyBackend.Models.Trailer", null)
                        .WithMany()
                        .HasForeignKey("TrailerId")
                        .IsRequired();
                });

            modelBuilder.Entity("TrailerCompanyBackend.Models.Accessory", b =>
                {
                    b.HasOne("TrailerCompanyBackend.Models.Store", "Store")
                        .WithMany("Accessories")
                        .HasForeignKey("StoreId")
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("TrailerCompanyBackend.Models.AccessorySize", b =>
                {
                    b.HasOne("TrailerCompanyBackend.Models.Accessory", "Accessory")
                        .WithMany("AccessorySizes")
                        .HasForeignKey("AccessoryId")
                        .IsRequired();

                    b.Navigation("Accessory");
                });

            modelBuilder.Entity("TrailerCompanyBackend.Models.AlertRecord", b =>
                {
                    b.HasOne("TrailerCompanyBackend.Models.AccessorySize", "AccessorySize")
                        .WithMany("AlertRecords")
                        .HasForeignKey("AccessorySizeId");

                    b.HasOne("TrailerCompanyBackend.Models.Trailer", "Trailer")
                        .WithMany("AlertRecords")
                        .HasForeignKey("TrailerId");

                    b.Navigation("AccessorySize");

                    b.Navigation("Trailer");
                });

            modelBuilder.Entity("TrailerCompanyBackend.Models.AssemblyRecord", b =>
                {
                    b.HasOne("TrailerCompanyBackend.Models.AccessorySize", "AccessorySize")
                        .WithMany("AssemblyRecords")
                        .HasForeignKey("AccessorySizeId");

                    b.HasOne("TrailerCompanyBackend.Models.Trailer", "Trailer")
                        .WithMany("AssemblyRecords")
                        .HasForeignKey("TrailerId")
                        .IsRequired();

                    b.Navigation("AccessorySize");

                    b.Navigation("Trailer");
                });

            modelBuilder.Entity("TrailerCompanyBackend.Models.DisposalRecord", b =>
                {
                    b.HasOne("TrailerCompanyBackend.Models.AccessorySize", "AccessorySize")
                        .WithMany("DisposalRecords")
                        .HasForeignKey("AccessorySizeId");

                    b.HasOne("TrailerCompanyBackend.Models.Trailer", "Trailer")
                        .WithMany("DisposalRecords")
                        .HasForeignKey("TrailerId");

                    b.Navigation("AccessorySize");

                    b.Navigation("Trailer");
                });

            modelBuilder.Entity("TrailerCompanyBackend.Models.InventoryRecord", b =>
                {
                    b.HasOne("TrailerCompanyBackend.Models.AccessorySize", "AccessorySize")
                        .WithMany("InventoryRecords")
                        .HasForeignKey("AccessorySizeId");

                    b.HasOne("TrailerCompanyBackend.Models.Store", "TargetStore")
                        .WithMany("InventoryRecords")
                        .HasForeignKey("TargetStoreId");

                    b.HasOne("TrailerCompanyBackend.Models.Trailer", "Trailer")
                        .WithMany("InventoryRecords")
                        .HasForeignKey("TrailerId");

                    b.Navigation("AccessorySize");

                    b.Navigation("TargetStore");

                    b.Navigation("Trailer");
                });

            modelBuilder.Entity("TrailerCompanyBackend.Models.RepairRecord", b =>
                {
                    b.HasOne("TrailerCompanyBackend.Models.AccessorySize", "AccessorySize")
                        .WithMany("RepairRecords")
                        .HasForeignKey("AccessorySizeId");

                    b.HasOne("TrailerCompanyBackend.Models.Trailer", "Trailer")
                        .WithMany("RepairRecords")
                        .HasForeignKey("TrailerId");

                    b.Navigation("AccessorySize");

                    b.Navigation("Trailer");
                });

            modelBuilder.Entity("TrailerCompanyBackend.Models.RestockRecord", b =>
                {
                    b.HasOne("TrailerCompanyBackend.Models.AccessorySize", "AccessorySize")
                        .WithMany("RestockRecords")
                        .HasForeignKey("AccessorySizeId");

                    b.HasOne("TrailerCompanyBackend.Models.Trailer", "Trailer")
                        .WithMany("RestockRecords")
                        .HasForeignKey("TrailerId");

                    b.Navigation("AccessorySize");

                    b.Navigation("Trailer");
                });

            modelBuilder.Entity("TrailerCompanyBackend.Models.SalesRecord", b =>
                {
                    b.HasOne("TrailerCompanyBackend.Models.AccessorySize", "AccessorySize")
                        .WithMany("SalesRecords")
                        .HasForeignKey("AccessorySizeId");

                    b.HasOne("TrailerCompanyBackend.Models.Trailer", "Trailer")
                        .WithMany("SalesRecords")
                        .HasForeignKey("TrailerId");

                    b.Navigation("AccessorySize");

                    b.Navigation("Trailer");
                });

            modelBuilder.Entity("TrailerCompanyBackend.Models.Trailer", b =>
                {
                    b.HasOne("TrailerCompanyBackend.Models.Store", "Store")
                        .WithMany("Trailers")
                        .HasForeignKey("StoreId")
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("TrailerCompanyBackend.Models.TransferRecord", b =>
                {
                    b.HasOne("TrailerCompanyBackend.Models.AccessorySize", "AccessorySize")
                        .WithMany("TransferRecords")
                        .HasForeignKey("AccessorySizeId");

                    b.HasOne("TrailerCompanyBackend.Models.Store", "SourceStore")
                        .WithMany("TransferRecordSourceStores")
                        .HasForeignKey("SourceStoreId")
                        .IsRequired();

                    b.HasOne("TrailerCompanyBackend.Models.Store", "TargetStore")
                        .WithMany("TransferRecordTargetStores")
                        .HasForeignKey("TargetStoreId")
                        .IsRequired();

                    b.HasOne("TrailerCompanyBackend.Models.Trailer", "Trailer")
                        .WithMany("TransferRecords")
                        .HasForeignKey("TrailerId");

                    b.Navigation("AccessorySize");

                    b.Navigation("SourceStore");

                    b.Navigation("TargetStore");

                    b.Navigation("Trailer");
                });

            modelBuilder.Entity("TrailerCompanyBackend.Models.Accessory", b =>
                {
                    b.Navigation("AccessorySizes");
                });

            modelBuilder.Entity("TrailerCompanyBackend.Models.AccessorySize", b =>
                {
                    b.Navigation("AlertRecords");

                    b.Navigation("AssemblyRecords");

                    b.Navigation("DisposalRecords");

                    b.Navigation("InventoryRecords");

                    b.Navigation("RepairRecords");

                    b.Navigation("RestockRecords");

                    b.Navigation("SalesRecords");

                    b.Navigation("TransferRecords");
                });

            modelBuilder.Entity("TrailerCompanyBackend.Models.Store", b =>
                {
                    b.Navigation("Accessories");

                    b.Navigation("InventoryRecords");

                    b.Navigation("Trailers");

                    b.Navigation("TransferRecordSourceStores");

                    b.Navigation("TransferRecordTargetStores");
                });

            modelBuilder.Entity("TrailerCompanyBackend.Models.Trailer", b =>
                {
                    b.Navigation("AlertRecords");

                    b.Navigation("AssemblyRecords");

                    b.Navigation("DisposalRecords");

                    b.Navigation("InventoryRecords");

                    b.Navigation("RepairRecords");

                    b.Navigation("RestockRecords");

                    b.Navigation("SalesRecords");

                    b.Navigation("TransferRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
